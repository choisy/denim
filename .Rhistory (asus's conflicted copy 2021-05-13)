return(prob)
}
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:100) {
print(g$getTransitionProb(i))
}
for (i in 0:20) {
print(g$getTransitionProb(i))
}
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
library(discreteModel)
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
comp <- new(Compartment, "S", 1000, d)
comp$name
library(discreteModel)
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
comp <- new(Compartment, "S", 1000, d)
comp$name
comp$dist
comp$dist$distName
comp$dist$getTransitionProb(1)
library(discreteModel)
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
# Compartment
S <- new(Compartment, "S", 1000, customDist)
S$name
S$subCompartmentValues
S$getDistName()
I <- new(Compartment, "I", 1, customDist)
I$getDistName()
shared_S <- new(CompartmentSharedPointer, S)
shared_S <- new(CompartmentSharedPointer, S)
shared_I <- new(CompartmentSharedPointer, I)
model <- new(Model, c("HCM"), 1.5)
model$modelName
model$addCompsAndConnect2(shared_S, shared_I, 0.2)
S$getLinkedCompartmentName()
model$addCompsAndConnect2(shared_S$comp_sharedptr, shared_I$comp_sharedptr, 0.2)
library(discreteModel)
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
# Compartment
S <- new(Compartment, "S", 1000, customDist)
S$name
S$subCompartmentValues
S$getDistName()
I <- new(Compartment, "I", 1, customDist)
I$getDistName()
# Model
model <- new(Model, c("HCM"), 1.5)
model$modelName
model$addCompsAndConnect2(S, I, 0.2)
S$getLinkedCompartment()
devtools::load_all(".")
library(discreteModel)
library(discreteModel)
ptr <- CompartmentSharedPtr()
ptr
my.name <- readline(prompt="Enter name: ")
# convert character into integer
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
my.name <- readline(prompt="Enter name: ")
my.name <- readline(prompt="Enter name: ")
my.name <- readline(prompt="Enter name: ")
library(discreteModel)
simulation("/home/thinh/Dropbox/oucru/cpp/cpp_training/config/SIR.json", "/home/thinh/Downloads")
library(discreteModel)
library(discreteModel)
library(jsonlite)
# Using input JSON file like in C++
simulation("/home/thinh/Dropbox/oucru/cpp/cpp_training/config/SIR_location.json", "/home/thinh/Downloads")
ms <- c("S->I", "I->R")
for (i in 1:length(ms)) {
a <- strsplit(ms[i], "->")
print(a)
}
for (i in 1:length(ms)) {
a <- unlist(strsplit(ms[i], "->"))
print(a)
}
comps <- c()
for (i in 1:length(ms)) {
append(comps, unlist(strsplit(ms[i], "->")))
}
append(1:5, 0:1, after = 3)
comps <- c()
for (i in 1:length(ms)) {
comps <- append(comps, unlist(strsplit(ms[i], "->")))
}
comps <- unique(comps)
getCompsFromModelStructure <- function(modelStructure) {
comps <- c()
for (i in 1:length(modelStructure)) {
comps <- append(comps, unlist(strsplit(modelStructure[i], "->")))
}
comps <- unique(comps)
return(comps)
}
ms <- c("S->I", "I->R")
getCompsFromModelStructure(ms)
modelStructure <- c("S->I", "I->R")
contactList <- list(age = c("0_14", "15_64", "65"), location = c("HCM", "HN"))
comps <- getCompsFromModelStructure(modelStructure = modelStructure)
expand.grid(c("0_14", "15_64", "65"))
expand.grid(contactList)
expand.grid(contactList[[1]], contactList[[1]])
get_perms <- function(x){
stopifnot(is.atomic(x)) # for the matrix call to make sense
out <- as.matrix(expand.grid(
replicate(length(x), x, simplify = FALSE), stringsAsFactors = FALSE))
out[apply(out,1, anyDuplicated) == 0, ]
}
get_perms(contactList[[1]])
combn(contactList[[1]])
combn(contactList[[1]], 2)
?combn
combn(rep(contactList[[1]], 2), 2)
combn(contactList[[1]], 2)
library(gtools)
?combinations
combinations(length(contactList[[1]]), 2, names.list, repeats = TRUE)
combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE)
data.frame(combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE))
comb_df$format <- paste0(comb_df[1], "<->", comb_df[2])
comb_df <- data.frame(combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE))
comb_df$format <- paste0(comb_df[1], "<->", comb_df[2])
comb_df
comb_df$format <- paste0(comb_df[,1], "<->", comb_df[,2])
comb_df
?combn
comb_df <- data.frame(combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE))
comb_df$format <- paste0(comb_df[,1], " <-> ", comb_df[,2])
comb_df
createContact("location", c("HCM", "HN"), comb_df)
## Make R to generate JSON format for C++
# Contact
createContact <- function(contactType, contactClasses, contactRates) {
d <- list(contactType = contactType, contactClasses = contactClasses, contactRates = contactRates)
d <- toJSON(d, pretty = TRUE, auto_unbox = TRUE)
return(d)
}
createContact("location", c("HCM", "HN"), comb_df)
createContact("location", c("HCM", "HN"), comb_df[3])
createContact("location", c("HCM", "HN"), comb_df$format)
names(contactList[[1]])
names(contactList)
contactList[[1]]
contactList <- list(age = c("0_14", "15_64", "65"), location = c("HCM", "HN"))
# Contact JSON
contactJSONList <- list()
for (i in 1:length(contactList)) {
comb_df <- data.frame(combinations(length(contactList[[i]]), 2, contactList[[i]], repeats = TRUE))
comb_df$contactFormat <- paste0(comb_df[,1], " <-> ", comb_df[,2])
contactJSONList[[i]] <- createContact(names(contactList)[i], contactList[i], comb_df$contactFormat)
}
contactJSONList
makeJSONElement("contacts", contactJSONList)
makeJSONElement <- function(label, elementList) {
output <- paste0("\"", label, "\": [\n")
for (i in 1:length(elementList)) {
output <- paste0(output, elementList[i])
if (i < length(elementList)) {
output <- paste0(output, ", \n")
}
}
output <- paste0(output, "\n]")
return(output)
}
makeJSONElement("contacts", contactJSONList)
cat(makeJSONElement("contacts", contactJSONList))
contactList[i]
contactList[[i]]
# Contact JSON
contactJSONList <- list()
for (i in 1:length(contactList)) {
comb_df <- data.frame(combinations(length(contactList[[i]]), 2, contactList[[i]], repeats = TRUE))
comb_df$contactFormat <- paste0(comb_df[,1], " <-> ", comb_df[,2])
contactJSONList[[i]] <- createContact(names(contactList)[i], contactList[[i]], comb_df$contactFormat)
}
cat(makeJSONElement("contacts", contactJSONList))
vec <- c(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0)
M <- matrix(vec, nrow = 4, byrow = TRUE)
M
?read.csv
df <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv", header = TRUE, row.names = 1)
df
df <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
df
M <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
wM <- which(M > 0, arr.ind = TRUE)
wM
matrix(sort(paste(rownames(wM), colnames(M)[wM[,2]], sep = ",")))
sort(paste(rownames(wM), colnames(M)[wM[,2]], sep = ","))
M <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
M
upper.tri(M)
upper.tri(M, diag = TRUE)
M[upper.tri(M, diag = TRUE)]
ind <- which(upper.tri(M, diag=F), arr.ind = TRUE)
ind
ind <- which(upper.tri(M, diag = TRUE), arr.ind = TRUE)
ind
data.frame(col = dimnames(x)[[2]][ind[,2]],
row = dimnames(x)[[1]][ind[,1]],
val = x[ind])
data.frame(col = dimnames(x)[[2]][ind[,2]],
row = dimnames(x)[[1]][ind[,1]],
val = M[ind])
x <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
ind <- which(upper.tri(x, diag = TRUE), arr.ind = TRUE)
data.frame(col = dimnames(x)[[2]][ind[,2]],
row = dimnames(x)[[1]][ind[,1]],
val = x[ind])
data.frame(row = dimnames(x)[[1]][ind[,1]],
col = dimnames(x)[[2]][ind[,2]],
val = x[ind])
df <- data.frame(row = dimnames(contactMatrix)[[1]][ind[,1]],
col = dimnames(contactMatrix)[[2]][ind[,2]],
val = contactMatrix[ind])
getPairContactFromMatrix <- function(contactMatrix) {
ind <- which(upper.tri(contactMatrix, diag = TRUE), arr.ind = TRUE)
df <- data.frame(row = dimnames(contactMatrix)[[1]][ind[,1]],
col = dimnames(contactMatrix)[[2]][ind[,2]],
val = contactMatrix[ind])
df$contact <- paste0(df$row, " <-> ", df$col, ": ", df$val)
return(df$contact)
}
M <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
getPairContactFromMatrix(M)
library(discreteModel)
library(discreteModel)
library(jsonlite)
library(gtools)
# Using input JSON file like in C++
simulation("/home/thinh/Dropbox/oucru/cpp/cpp_training/config/SIR_location.json", "/home/thinh/Downloads")
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
## Make R to generate JSON format for C++
# Contact
createContact <- function(contactType, contactClasses, contactRates) {
d <- list(contactType = contactType, contactClasses = contactClasses, contactRates = contactRates)
d <- toJSON(d, pretty = TRUE, auto_unbox = TRUE)
return(d)
}
# Model
setModelStructure <- function(...) {
d <- c(...)
d <- toJSON(d)
return(d)
}
setInfectiousComps <- function(...) {
d <- c(...)
d <- toJSON(d)
return(d)
}
setContactAssumption <- function(...) {
d <- c(...)
d <- toJSON(d)
return(d)
}
createDistribution <- function(name, ...) {
d <- list(name = name, ...)
return(d)
}
createCompartment <- function(name, distribution, initialValue) {
elements_list = list(name = name, distribution = distribution, initialValue = initialValue)
return(elements_list)
}
allCompartments <- function(modelName, transmissionRate, ...) {
a <- list(modelName = list(modelName), transmissionRate = transmissionRate, compartments = list(...))
a <- toJSON(a, pretty = TRUE, auto_unbox = TRUE)
return(a)
}
makeJSONElement <- function(label, elementList) {
output <- paste0("\"", label, "\": [\n")
for (i in 1:length(elementList)) {
output <- paste0(output, elementList[i])
if (i < length(elementList)) {
output <- paste0(output, ", \n")
}
}
output <- paste0(output, "\n]")
return(output)
}
allModels <- function(daysFollowUp, errorTolerance = 0.01, timeStep = 1, modelStructure, infectiousComps, contactAssumption, contacts, models) {
contactJSON <- makeJSONElement("contacts", contacts)
modelsJSON <- makeJSONElement("models", models)
a <- paste0("{\n\"daysFollowUp\": ", daysFollowUp, ",\n",
"\"errorTolerance\": ", errorTolerance, ",\n",
"\"timeStep\": ", timeStep, ",\n",
"\"modelStructure\": ", modelStructure, ",\n",
"\"infectiousComps\": ", infectiousComps, ",\n",
"\"contactAssumption\": ", contactAssumption, ",\n",
contactJSON, ",\n",
modelsJSON,
"\n}")
return(a)
}
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
contacts <- createContact("location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
HCM <- allCompartments(modelName = c("HCM"), transmissionRate = 1.5,
createCompartment(name = "S", distribution = createDistribution("transitionProb", transitionProb = 0.0), initialValue = 1000),
createCompartment(name = "I", distribution = createDistribution("exponential", rate = 0.3), initialValue = 1),
createCompartment(name = "R", distribution = createDistribution("transitionProb", transitionProb = 0.0), initialValue = 0)
)
HN <- allCompartments(modelName = c("HN"), transmissionRate = 1.5,
createCompartment(name = "S", distribution = createDistribution("transitionProb", transitionProb = 0.0), initialValue = 699),
createCompartment(name = "I", distribution = createDistribution("gamma", shape = 3, scale = 2), initialValue = 1),
createCompartment(name = "R", distribution = createDistribution("transitionProb", transitionProb = 0.0), initialValue = 0)
)
exportJSON <- allModels(daysFollowUp = 50002, modelStructure = ms,
infectiousComps = ic, contactAssumption = ca,
contacts = contacts, models = c(HCM, HN))
exportJSON
cat(exportJSON)
simulation(exportJSON, "/home/thinh/Downloads")
library(discreteModel)
# Model
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
contacts <- createContact("location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
S_HCM <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 1000)
I_HCM <- createCompartment(name = "I",
distribution = createDistribution("exponential", rate = 0.3),
initialValue = 1)
R_HCM <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
S_HN <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 699)
I_HN <- createCompartment(name = "I",
distribution = createDistribution("gamma", shape = 3, scale = 2),
initialValue = 1)
R_HN <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
HCM <- allCompartments(modelName = c("HCM"), transmissionRate = 1.5, S_HCM, I_HCM, R_HCM)
HN <- allCompartments(modelName = c("HN"), transmissionRate = 1.5, S_HN, I_HN, R_HN)
exportJSON <- allModels(daysFollowUp = 50002, timeStep = 0.01, modelStructure = ms,
infectiousComps = ic, contactAssumption = ca,
contacts = contacts, models = c(HCM, HN))
df <- simulate(exportJSON)
library(discreteModel)
# Model
ms <- setModelStructure("S->I", "I->R")
?discreteModel
?discreteModel-package
library(discreteModel)
library(discreteModel)
# Model
ms <- setModelStructure("S->I", "I->R")
library(jsonlite)
# Model
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
library(discreteModel)
library(jsonlite)
# Model
ms <- setModelStructure("S->I", "I->R")
library(devtools)
install.packages("thinhong/discreteModel")
install_github("thinhong/discreteModel")
library(discreteModel)
library(jsonlite)
# Model
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
contacts <- createContact("location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
install_github("thinhong/discreteModel")
library(discreteModel)
# Model
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
contacts <- createContact("location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
S_HCM <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 1000)
I_HCM <- createCompartment(name = "I",
distribution = createDistribution("exponential", rate = 0.3),
initialValue = 1)
R_HCM <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
S_HN <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 699)
I_HN <- createCompartment(name = "I",
distribution = createDistribution("gamma", shape = 3, scale = 2),
initialValue = 1)
R_HN <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
HCM <- allCompartments(modelName = c("HCM"), transmissionRate = 1.5, S_HCM, I_HCM, R_HCM)
HN <- allCompartments(modelName = c("HN"), transmissionRate = 1.5, S_HN, I_HN, R_HN)
exportJSON <- allModels(daysFollowUp = 50002, timeStep = 0.01, modelStructure = ms,
infectiousComps = ic, contactAssumption = ca,
contacts = contacts, models = c(HCM, HN))
df <- simulate(exportJSON)
library(discreteModel)
# Model
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
contacts <- createContact("location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
S_HCM <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 1000)
I_HCM <- createCompartment(name = "I",
distribution = createDistribution("exponential", rate = 0.3),
initialValue = 1)
R_HCM <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
S_HN <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 699)
I_HN <- createCompartment(name = "I",
distribution = createDistribution("gamma", shape = 3, scale = 2),
initialValue = 1)
library(discreteModel)
# Model
ms <- setModelStructure("S->I", "I->R")
ic <- setInfectiousComps("I")
ca <- setContactAssumption("location")
contacts <- createContact("location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
S_HCM <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 1000)
I_HCM <- createCompartment(name = "I",
distribution = createDistribution("exponential", rate = 0.3),
initialValue = 1)
R_HCM <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
S_HN <- createCompartment(name = "S",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 699)
I_HN <- createCompartment(name = "I",
distribution = createDistribution("gamma", shape = 3, scale = 2),
initialValue = 1)
R_HN <- createCompartment(name = "R",
distribution = createDistribution("transitionProb", transitionProb = 0.0),
initialValue = 0)
HCM <- allCompartments(modelName = c("HCM"), transmissionRate = 1.5, S_HCM, I_HCM, R_HCM)
HN <- allCompartments(modelName = c("HN"), transmissionRate = 1.5, S_HN, I_HN, R_HN)
exportJSON <- allModels(daysFollowUp = 50002, timeStep = 0.01, modelStructure = ms,
infectiousComps = ic, contactAssumption = ca,
contacts = contacts, models = c(HCM, HN))
df <- simulate(exportJSON)
