"I -> R" = d_gamma(scale = 3, shape = 2)
)
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6, timeStepDur = 0.01)
start <- Sys.time()
denim_out <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
end <- Sys.time()
print(end - start)
plot(denim_out)
library(arrow)
df <- as.data.frame(py$df)
library(arrow)
library(reticulate)
df <- as.data.frame(py$df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
reticulate::repl_python()
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
$stdou
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
round(0.694363849578,4)
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
useir_offset <- 10
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t - useir_offset, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t - useir_offset, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t - useir_offset, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t - useir_offset, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
useir_offset <- 10
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t + useir_offset, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
useir_offset <- 9
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t + useir_offset, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
useir_offset <- 8
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t + useir_offset, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
useir_offset <- 7
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t + useir_offset, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
useir_offset <- 6
# ---- Plot S compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$S,xlab = "Time", ylab = "Count", main="S compartment", col = "#4876ff", type="l", lwd=3)
lines(df$t + useir_offset, df$S, lwd=3, lty=3)
legend(x = 15, y = 900,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$E, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$I, lwd=3, lty=3)
legend(x = 15, y = 350,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = rescaled_denim$Time, y = rescaled_denim$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(df$t + useir_offset, df$R, lwd=3, lty=3)
legend(x = 15, y = 300,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
pkgdown::build_site()
pkgdown::build_site()
library(denim)
denim_model <- list(
"S -> E" = "(R0/tr) * timeStepDur * S * (I/N)", # formulate according that of uSEIR method
"E -> I" = d_gamma(scale = 4, shape = 2),
"I -> R" = d_gamma(scale = 3, shape = 2)
)
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6, timeStepDur = 0.01)
start <- Sys.time()
denim_out <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
end <- Sys.time()
runtime <- end - start
mod <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
pkgdown::build_site()
start
end
timediff(end, start)
time_diff(end, start)
difftime(end, start, units = "secs")
difftime(end, start)
start <- proc.time()
mod <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
end <- proc.time()
runtime <- end - start
runtime
microbenchmark
runtime <- system.time(
mod <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
)
runtime
runtime$user
runtime[[]]
runtime["elapsed"]
runtime[["elapsed"]]
# denim_out[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
plot(mod)
pkgdown::build_site()
denim_model <- list(
"S -> E" = "(R0/tr) * timeStepDur * S * (I/N)", # formulate according that of uSEIR method
"E -> I" = d_gamma(scale = 4, shape = 2),
"I -> R" = d_gamma(scale = 3, shape = 2)
)
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6, timeStepDur = 0.01)
runtime <- system.time(
mod <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
)
# denim_out[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
plot(mod)
runtime[["elapsed"]]
library(deSolve)
parameters <- c(scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
tr = scale_R*shape_R
dS = - (R0/tr) * S * I/N
# apply linear chain trick
dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = gamma_rate_I*E2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI =  dI1 + dI2
dR = gamma_rate_R*I2
list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))
})
}
times <- seq(0, 210, 1)
runtime <- system.time(
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
# --- show output
ode_mod <- as.data.frame(ode_mod)
runtime[["elapsed"]]
denim_model <- list(
"S -> E" = "(R0/tr) * timeStepDur * S * (I/N)", # formulate according that of uSEIR method
"E -> I" = d_gamma(scale = 4, shape = 2),
"I -> R" = d_gamma(scale = 3, shape = 2)
)
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6, timeStepDur = 0.01)
runtime <- system.time(
mod <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
)
# denim_out[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
plot(mod)
runtime[["elapse"]]
runtime[["elapsed"]]
runtime <- system.time(
denim_out <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
)
runtime[["elapsed"]]
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::test()
library(denim)
library(deSolve)
devtools::test()
devtools::check()
?compare_proxy
# ---- Plot S compartment
plot(x = mod$Time, y = mod$S,xlab = "Time", ylab = "Count", main="S compartment",
col = "#4876ff", type="l", lwd=3)
lines(ode_mod$time, ode_mod$S, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot E compartment
plot(x = mod$Time, y = mod$E, xlab = "Time", ylab = "Count", main="E compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$E, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = mod$Time, y = mod$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$I, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = mod$Time, y = mod$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$R, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
library(deSolve)
parameters <- c(scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
tr = scale_R*shape_R
dS = - (R0/tr) * S * I/N
# apply linear chain trick
dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = gamma_rate_I*E2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI =  dI1 + dI2
dR = gamma_rate_R*I2
list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))
})
}
times <- seq(0, 210, 1)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
{result <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
print(head(result))}
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
result <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
runtimes <- sapply(1:10,
function(i){
time <- system.time(
ode(y = initialValues, times = times, parms = parameters, func = transition_func)
)
time[["elapsed"]]
}
)
mean(runtimes)
reticulate::repl_python()
