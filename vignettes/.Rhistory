dR = dR1 + dR2 + dR3
list(c(dS, dI, dI1, dI2, dR, dR1, dR2, dR3))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 0.01, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999,
I = 1, I1 = 1, I2=0,
R=0, R1=0, R2=0, R3=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R) * timeStepDur * S * (I/N)
dE = (R0/shape_R) * timeStepDur * S * (I/N) - gamma_rate_I*I1
# apply linear chain trick
dI1 = rate*S - gamma_rate_I*I1
dI2 = gamma_rate_I*I1 - gamma_rate_I*I2
dI =  dI1 + dI2
dR1 = I2 - gamma_rate_R*R1
dR2 = gamma_rate_R*R1 - gamma_rate_R*R2
dR3 = gamma_rate_R*R2 - gamma_rate_R*R3
dR = dR1 + dR2 + dR3
list(c(dS, dI, dI1, dI2, dR, dR1, dR2, dR3))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:simulationDuration, c("time", "S","E", "I", "R")])
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 0.01, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999, E = 1,
I = 0, I1 = 0, I2=0,
R=0, R1=0, R2=0, R3=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R) * timeStepDur * S * (I/N)
dE = (R0/shape_R) * timeStepDur * S * (I/N) - gamma_rate_I*I1
# apply linear chain trick
dI1 = rate*S - gamma_rate_I*I1
dI2 = gamma_rate_I*I1 - gamma_rate_I*I2
dI =  dI1 + dI2
dR1 = I2 - gamma_rate_R*R1
dR2 = gamma_rate_R*R1 - gamma_rate_R*R2
dR3 = gamma_rate_R*R2 - gamma_rate_R*R3
dR = dR1 + dR2 + dR3
list(c(dS, dE, dI, dI1, dI2, dR, dR1, dR2, dR3))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 0.01, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R) * timeStepDur * S * (I/N)
# apply linear chain trick
dE1 = (R0/shape_R) * timeStepDur * S * (I/N) - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_I*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 0.00001, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R) * timeStepDur * S * (I/N)
# apply linear chain trick
dE1 = (R0/shape_R) * timeStepDur * S * (I/N) - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_I*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R) * timeStepDur * S * (I/N)
# apply linear chain trick
dE1 = (R0/shape_R) * timeStepDur * S * (I/N) - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_I*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * (I/N)
# apply linear chain trick
dE1 = (R0/shape_R)  * S * (I/N) - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_I*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
ggplot2::ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
library(ggplot2)
library(ggplot2)
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * I
# apply linear chain trick
dE1 = (R0/shape_R)  * S * I - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_I*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(ggplot2)
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
View(denim_out)
library(denim)
# denim_model <- list(
#   "S -> E" = "(R0/tr_shape) * timeStepDur * S * (I/N)", # formulate according that of uSEIR method
#   "E -> I" = d_gamma(scale = 1, shape = 5.5),
#   "I -> R" = d_gamma(scale = 1, shape = 6.5)
# )
denim_model <- list(
"S -> E" = "(R0/tr_shape) * timeStepDur * S * (I/N)", # formulate according that of uSEIR method
"E -> I" = d_gamma(scale = 4, shape = 2),
"I -> R" = d_gamma(scale = 6, shape = 3)
)
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5, tr_shape = 3, N = 1e6, timeStepDur = 0.01)
start <- Sys.time()
denim_out <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = 210, timeStep = 0.01)
end <- Sys.time()
print(end - start)
# denim_out[, c("S","E", "I", "R")] <- denim_out[, c("S","E", "I", "R")]/1e6
plot(denim_out)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * I/N
# apply linear chain trick
dE1 = (R0/shape_R)  * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_I*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * I/N
# apply linear chain trick
dE1 = (R0/shape_R)  * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*E2 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_R*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 0.01)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(ggplot2)
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * I/N
# apply linear chain trick
dE1 = (R0/shape_R)  * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = dE2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_R*I3
dI =  dI1 + dI2 + dI3
dR = dI3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 1)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(ggplot2)
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
library(deSolve)
# --- Transition def for denim
# transitions <- list(
#   "S -> I" = d_exponential(0.2),
#   "I -> R" = d_gamma(3, 2)
# )
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * I/N
# apply linear chain trick
dE1 = (R0/shape_R)  * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = gamma_rate_I*E2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_R*I3
dI =  dI1 + dI2 + dI3
dR = gamma_rate_R*I3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 1)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[ode_mod$time %in% 1:210, c("time", "S","E", "I", "R")])
library(ggplot2)
ggplot(ode_mod) +
geom_line(aes(x = time, y = S)) +
geom_line(aes(x = time, y = E)) +
geom_line(aes(x = time, y = I)) +
geom_line(aes(x = time, y = R))
parameters <- c(rate = 0.2,
scale_I = 4, shape_I=2,
scale_R = 6, shape_R = 3,
timeStepDur = 1, R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I3=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
dS = - (R0/shape_R)  * S * I/N
# apply linear chain trick
dE1 = (R0/shape_R)  * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = gamma_rate_I*E2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI3 = gamma_rate_R*I2 - gamma_rate_R*I3
dI =  dI1 + dI2 + dI3
dR = gamma_rate_R*I3
list(c(dS, dE1, dE2, dE, dI1, dI2, dI3, dI, dR))
})
}
times <- seq(0, 210, 1)
start <- Sys.time()
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
end <- Sys.time()
print(end - start)
start <- Sys.time()
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
end <- Sys.time()
print(end - start)
reticulate::repl_python()
library(reticulate)
# use_python("/opt/anaconda3/envs/bnn/bin/python", required = TRUE)
use_condaenv(condaenv='bnn', required = TRUE)
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
reticulate::repl_python()
reticulate::repl_python()
