library(discreteModel)
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
library(discreteModel)
library(discreteModel)
# Exponential distribution
e <- new(DiscreteExponentialDistribution, 1.5)
for (i in 0:10) {
print(e$getTransitionProb(i))
}
e <- new(DiscreteExponentialDistribution, 0.05)
for (i in 0:10) {
print(e$getTransitionProb(i))
}
e$maxDay
library(discreteModel)
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:20) {
print(g$getTransitionProb(i))
}
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
plot(1:5, p[1:5])
p <- c(0.1, 0.3, 0.4, 0.2)
# Initialize model
beta <- 0.0012
S <- 999
I1 <- 1
I2 <- 0
I3 <- 0
I4 <- 0
R1 <- 0
R2 <- 0
R3 <- 0
R4 <- 0
R <- 0
# A function to calculate prob from pdf
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
x1 <- pdfToProb(p, 1)
x1
# Set a distribution and compute cdf
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
# plot(1:5, p[1:5])
#
# p <- c(0.1, 0.3, 0.4, 0.2)
# Initialize model
beta <- 0.0012
S <- 999
I1 <- 1
I2 <- 0
I3 <- 0
I4 <- 0
R1 <- 0
R2 <- 0
R3 <- 0
R4 <- 0
R <- 0
# A function to calculate prob from pdf
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
pdfToProb(p, 1)
x1
x2 <- pdfToProb(p, 2)
x2
p
# Set a distribution and compute cdf
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
plot(1:5, p[1:5])
p[2:5])
plot(2:5, p[2:5])
# Set a distribution and compute cdf
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
p <- p[2:length(p)]
p
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
p <- p[2:length(p)]
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
pgamma(2, shape = 5, rate = 1.5)
pgamma(1, shape = 5, rate = 1.5)
pgamma(0, shape = 5, rate = 1.5)
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
append(cdf, tempProb)
i <- i + 1
}
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
append(cdf, tempProb)
i <- i + 1
}
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
append(cdf, tempProb)
i <- i + 1
}
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
cdf <- append(cdf, tempProb)
i <- i + 1
}
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:100) {
print(g$getTransitionProb(i))
}
p <- c()
for (i in 1:length(cdf)) {
tempProb <- cdf[i + 1] - cdf[i]
p <- append(p, tempProb)
}
library(ggplot2)
library(tidyr)
library(viridis)
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
cdf <- append(cdf, tempProb)
i <- i + 1
}
p <- c()
for (i in 1:length(cdf)) {
tempProb <- cdf[i + 1] - cdf[i]
p <- append(p, tempProb)
}
# A function to calculate prob from pdf
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:100) {
print(g$getTransitionProb(i))
}
for (i in 0:20) {
print(g$getTransitionProb(i))
}
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
library(discreteModel)
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
comp <- new(Compartment, "S", 1000, d)
comp$name
library(discreteModel)
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
comp <- new(Compartment, "S", 1000, d)
comp$name
comp$dist
comp$dist$distName
comp$dist$getTransitionProb(1)
library(discreteModel)
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
# Compartment
S <- new(Compartment, "S", 1000, customDist)
S$name
S$subCompartmentValues
S$getDistName()
I <- new(Compartment, "I", 1, customDist)
I$getDistName()
shared_S <- new(CompartmentSharedPointer, S)
shared_S <- new(CompartmentSharedPointer, S)
shared_I <- new(CompartmentSharedPointer, I)
model <- new(Model, c("HCM"), 1.5)
model$modelName
model$addCompsAndConnect2(shared_S, shared_I, 0.2)
S$getLinkedCompartmentName()
model$addCompsAndConnect2(shared_S$comp_sharedptr, shared_I$comp_sharedptr, 0.2)
library(discreteModel)
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
# Compartment
S <- new(Compartment, "S", 1000, customDist)
S$name
S$subCompartmentValues
S$getDistName()
I <- new(Compartment, "I", 1, customDist)
I$getDistName()
# Model
model <- new(Model, c("HCM"), 1.5)
model$modelName
model$addCompsAndConnect2(S, I, 0.2)
S$getLinkedCompartment()
devtools::load_all(".")
library(discreteModel)
library(discreteModel)
ptr <- CompartmentSharedPtr()
ptr
my.name <- readline(prompt="Enter name: ")
# convert character into integer
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
my.name <- readline(prompt="Enter name: ")
my.name <- readline(prompt="Enter name: ")
my.name <- readline(prompt="Enter name: ")
library(discreteModel)
simulation("/home/thinh/Dropbox/oucru/cpp/cpp_training/config/SIR.json", "/home/thinh/Downloads")
library(discreteModel)
library(discreteModel)
library(jsonlite)
# Using input JSON file like in C++
simulation("/home/thinh/Dropbox/oucru/cpp/cpp_training/config/SIR_location.json", "/home/thinh/Downloads")
ms <- c("S->I", "I->R")
for (i in 1:length(ms)) {
a <- strsplit(ms[i], "->")
print(a)
}
for (i in 1:length(ms)) {
a <- unlist(strsplit(ms[i], "->"))
print(a)
}
comps <- c()
for (i in 1:length(ms)) {
append(comps, unlist(strsplit(ms[i], "->")))
}
append(1:5, 0:1, after = 3)
comps <- c()
for (i in 1:length(ms)) {
comps <- append(comps, unlist(strsplit(ms[i], "->")))
}
comps <- unique(comps)
getCompsFromModelStructure <- function(modelStructure) {
comps <- c()
for (i in 1:length(modelStructure)) {
comps <- append(comps, unlist(strsplit(modelStructure[i], "->")))
}
comps <- unique(comps)
return(comps)
}
ms <- c("S->I", "I->R")
getCompsFromModelStructure(ms)
modelStructure <- c("S->I", "I->R")
contactList <- list(age = c("0_14", "15_64", "65"), location = c("HCM", "HN"))
comps <- getCompsFromModelStructure(modelStructure = modelStructure)
expand.grid(c("0_14", "15_64", "65"))
expand.grid(contactList)
expand.grid(contactList[[1]], contactList[[1]])
get_perms <- function(x){
stopifnot(is.atomic(x)) # for the matrix call to make sense
out <- as.matrix(expand.grid(
replicate(length(x), x, simplify = FALSE), stringsAsFactors = FALSE))
out[apply(out,1, anyDuplicated) == 0, ]
}
get_perms(contactList[[1]])
combn(contactList[[1]])
combn(contactList[[1]], 2)
?combn
combn(rep(contactList[[1]], 2), 2)
combn(contactList[[1]], 2)
library(gtools)
?combinations
combinations(length(contactList[[1]]), 2, names.list, repeats = TRUE)
combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE)
data.frame(combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE))
comb_df$format <- paste0(comb_df[1], "<->", comb_df[2])
comb_df <- data.frame(combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE))
comb_df$format <- paste0(comb_df[1], "<->", comb_df[2])
comb_df
comb_df$format <- paste0(comb_df[,1], "<->", comb_df[,2])
comb_df
?combn
comb_df <- data.frame(combinations(length(contactList[[1]]), 2, contactList[[1]], repeats = TRUE))
comb_df$format <- paste0(comb_df[,1], " <-> ", comb_df[,2])
comb_df
createContact("location", c("HCM", "HN"), comb_df)
## Make R to generate JSON format for C++
# Contact
createContact <- function(contactType, contactClasses, contactRates) {
d <- list(contactType = contactType, contactClasses = contactClasses, contactRates = contactRates)
d <- toJSON(d, pretty = TRUE, auto_unbox = TRUE)
return(d)
}
createContact("location", c("HCM", "HN"), comb_df)
createContact("location", c("HCM", "HN"), comb_df[3])
createContact("location", c("HCM", "HN"), comb_df$format)
names(contactList[[1]])
names(contactList)
contactList[[1]]
contactList <- list(age = c("0_14", "15_64", "65"), location = c("HCM", "HN"))
# Contact JSON
contactJSONList <- list()
for (i in 1:length(contactList)) {
comb_df <- data.frame(combinations(length(contactList[[i]]), 2, contactList[[i]], repeats = TRUE))
comb_df$contactFormat <- paste0(comb_df[,1], " <-> ", comb_df[,2])
contactJSONList[[i]] <- createContact(names(contactList)[i], contactList[i], comb_df$contactFormat)
}
contactJSONList
makeJSONElement("contacts", contactJSONList)
makeJSONElement <- function(label, elementList) {
output <- paste0("\"", label, "\": [\n")
for (i in 1:length(elementList)) {
output <- paste0(output, elementList[i])
if (i < length(elementList)) {
output <- paste0(output, ", \n")
}
}
output <- paste0(output, "\n]")
return(output)
}
makeJSONElement("contacts", contactJSONList)
cat(makeJSONElement("contacts", contactJSONList))
contactList[i]
contactList[[i]]
# Contact JSON
contactJSONList <- list()
for (i in 1:length(contactList)) {
comb_df <- data.frame(combinations(length(contactList[[i]]), 2, contactList[[i]], repeats = TRUE))
comb_df$contactFormat <- paste0(comb_df[,1], " <-> ", comb_df[,2])
contactJSONList[[i]] <- createContact(names(contactList)[i], contactList[[i]], comb_df$contactFormat)
}
cat(makeJSONElement("contacts", contactJSONList))
vec <- c(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0)
M <- matrix(vec, nrow = 4, byrow = TRUE)
M
?read.csv
df <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv", header = TRUE, row.names = 1)
df
df <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
df
M <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
wM <- which(M > 0, arr.ind = TRUE)
wM
matrix(sort(paste(rownames(wM), colnames(M)[wM[,2]], sep = ",")))
sort(paste(rownames(wM), colnames(M)[wM[,2]], sep = ","))
M <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
M
upper.tri(M)
upper.tri(M, diag = TRUE)
M[upper.tri(M, diag = TRUE)]
ind <- which(upper.tri(M, diag=F), arr.ind = TRUE)
ind
ind <- which(upper.tri(M, diag = TRUE), arr.ind = TRUE)
ind
data.frame(col = dimnames(x)[[2]][ind[,2]],
row = dimnames(x)[[1]][ind[,1]],
val = x[ind])
data.frame(col = dimnames(x)[[2]][ind[,2]],
row = dimnames(x)[[1]][ind[,1]],
val = M[ind])
x <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
ind <- which(upper.tri(x, diag = TRUE), arr.ind = TRUE)
data.frame(col = dimnames(x)[[2]][ind[,2]],
row = dimnames(x)[[1]][ind[,1]],
val = x[ind])
data.frame(row = dimnames(x)[[1]][ind[,1]],
col = dimnames(x)[[2]][ind[,2]],
val = x[ind])
df <- data.frame(row = dimnames(contactMatrix)[[1]][ind[,1]],
col = dimnames(contactMatrix)[[2]][ind[,2]],
val = contactMatrix[ind])
getPairContactFromMatrix <- function(contactMatrix) {
ind <- which(upper.tri(contactMatrix, diag = TRUE), arr.ind = TRUE)
df <- data.frame(row = dimnames(contactMatrix)[[1]][ind[,1]],
col = dimnames(contactMatrix)[[2]][ind[,2]],
val = contactMatrix[ind])
df$contact <- paste0(df$row, " <-> ", df$col, ": ", df$val)
return(df$contact)
}
M <- read.csv("/home/thinh/Dropbox/oucru/rcpp/testRcpp/age.csv",
header = TRUE, check.names = FALSE, row.names = 1)
getPairContactFromMatrix(M)
