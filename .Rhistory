devtools::document()
devtools::document()
.Last.error.trace
devtools::document()
devtools::document()
.Last.error.trace
library(discreteModel)
d <- CustomDistribution(c(1, 2, 3))
d <- CustomDistribution(c(1.1, 2.2, 3.3))
d <- new(CustomDistribution, c(1, 2, 3))
d$distName
library(discreteModel)
d <- new(CustomDistribution, c(1, 2, 3))
d$waitingTime
d <- new(CustomDistribution, c(0.300, 0.49, 0.105, 0.105))
d$waitingTime
d <- new(CustomDistribution, c(0.300, 0.49, 0.105, 0.105))
d$waitingTime
library(discreteModel)
d <- new(CustomDistribution, c(0.300, 0.49, 0.105, 0.105))
d$waitingTime
library(discreteModel)
d <- new(CustomDistribution, c(0.300, 0.49, 0.105, 0.105))
d$waitingTime
library(discreteModel)
d <- new(CustomDistribution, c(0.300, 0.49, 0.105, 0.105))
d$waitingTime
d$getTransitionProb(1)
d$getTransitionProb(0)
for (i in 0:4) {
print(d$getTransitionProb(i))
}
for (i in 0:5) {
print(d$getTransitionProb(i))
}
for (i in 0:10) {
print(d$getTransitionProb(i))
}
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
library(discreteModel)
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
library(discreteModel)
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
library(discreteModel)
library(discreteModel)
# Exponential distribution
e <- new(DiscreteExponentialDistribution, 1.5)
for (i in 0:10) {
print(e$getTransitionProb(i))
}
e <- new(DiscreteExponentialDistribution, 0.05)
for (i in 0:10) {
print(e$getTransitionProb(i))
}
e$maxDay
library(discreteModel)
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:20) {
print(g$getTransitionProb(i))
}
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
plot(1:5, p[1:5])
p <- c(0.1, 0.3, 0.4, 0.2)
# Initialize model
beta <- 0.0012
S <- 999
I1 <- 1
I2 <- 0
I3 <- 0
I4 <- 0
R1 <- 0
R2 <- 0
R3 <- 0
R4 <- 0
R <- 0
# A function to calculate prob from pdf
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
x1 <- pdfToProb(p, 1)
x1
# Set a distribution and compute cdf
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
# plot(1:5, p[1:5])
#
# p <- c(0.1, 0.3, 0.4, 0.2)
# Initialize model
beta <- 0.0012
S <- 999
I1 <- 1
I2 <- 0
I3 <- 0
I4 <- 0
R1 <- 0
R2 <- 0
R3 <- 0
R4 <- 0
R <- 0
# A function to calculate prob from pdf
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
pdfToProb(p, 1)
x1
x2 <- pdfToProb(p, 2)
x2
p
# Set a distribution and compute cdf
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
plot(1:5, p[1:5])
p[2:5])
plot(2:5, p[2:5])
# Set a distribution and compute cdf
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
p <- p[2:length(p)]
p
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
days <- seq(0, 5, 1)
# p <- dexp(days, rate = 1.5)
p <- dgamma(days, shape = 5, rate = 1.5)
sum_p <- sum(p)
p <- p/sum_p
p
p <- p[2:length(p)]
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
pgamma(2, shape = 5, rate = 1.5)
pgamma(1, shape = 5, rate = 1.5)
pgamma(0, shape = 5, rate = 1.5)
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
append(cdf, tempProb)
i <- i + 1
}
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
append(cdf, tempProb)
i <- i + 1
}
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
append(cdf, tempProb)
i <- i + 1
}
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
cdf <- append(cdf, tempProb)
i <- i + 1
}
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:100) {
print(g$getTransitionProb(i))
}
p <- c()
for (i in 1:length(cdf)) {
tempProb <- cdf[i + 1] - cdf[i]
p <- append(p, tempProb)
}
library(ggplot2)
library(tidyr)
library(viridis)
scale <- 1.5
shape <- 5
cdf <- c()
i <- 0
tempProb <- 0
while (tempProb <= 0.99) {
tempProb <- pgamma(i, scale = scale, shape = shape)
cdf <- append(cdf, tempProb)
i <- i + 1
}
p <- c()
for (i in 1:length(cdf)) {
tempProb <- cdf[i + 1] - cdf[i]
p <- append(p, tempProb)
}
# A function to calculate prob from pdf
pdfToProb <- function(pdf, n) {
if (n == 1) {
prob <- pdf[n]
} else {
denom <- c()
for (i in 1:(n-1)) {
denom[i] <- pdf[i]
}
prob <- pdf[n] / (1 - sum(denom))
}
return(prob)
}
x1 <- p[1]
x1
x2 <- p[2]/(1-p[1])
x2
x3 <- p[3]/(1-p[1]-p[2])
x3
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
# Gamma distribution
g <- new(DiscreteGammaDistribution, 1.5, 5)
for (i in 0:100) {
print(g$getTransitionProb(i))
}
for (i in 0:20) {
print(g$getTransitionProb(i))
}
for (i in 1:length(p)) {
print(pdfToProb(p, i))
}
library(discreteModel)
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
comp <- new(Compartment, "S", 1000, d)
comp$name
library(discreteModel)
wtime <- c(0.300, 0.49, 0.105, 0.105)
d <- new(CustomDistribution, wtime)
d$waitingTime
for (i in 0:10) {
print(d$getTransitionProb(i))
}
comp <- new(Compartment, "S", 1000, d)
comp$name
comp$dist
comp$dist$distName
comp$dist$getTransitionProb(1)
library(discreteModel)
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
# Compartment
S <- new(Compartment, "S", 1000, customDist)
S$name
S$subCompartmentValues
S$getDistName()
I <- new(Compartment, "I", 1, customDist)
I$getDistName()
shared_S <- new(CompartmentSharedPointer, S)
shared_S <- new(CompartmentSharedPointer, S)
shared_I <- new(CompartmentSharedPointer, I)
model <- new(Model, c("HCM"), 1.5)
model$modelName
model$addCompsAndConnect2(shared_S, shared_I, 0.2)
S$getLinkedCompartmentName()
model$addCompsAndConnect2(shared_S$comp_sharedptr, shared_I$comp_sharedptr, 0.2)
library(discreteModel)
# Contact
locationContact <- new(Contact, "location", c("HCM", "HN"), c("HCM <-> HCM: 0.85", "HCM <-> HN: 0.1", "HN <-> HN: 0.95"))
locationContact$contactType
# Custom distribution
wtime <- c(0.300, 0.49, 0.105, 0.105, 0.4, 0.7)
customDist <- new(CustomDistribution, wtime)
customDist$waitingTime
for (i in 0:10) {
print(customDist$getTransitionProb(i))
}
# Compartment
S <- new(Compartment, "S", 1000, customDist)
S$name
S$subCompartmentValues
S$getDistName()
I <- new(Compartment, "I", 1, customDist)
I$getDistName()
# Model
model <- new(Model, c("HCM"), 1.5)
model$modelName
model$addCompsAndConnect2(S, I, 0.2)
S$getLinkedCompartment()
devtools::load_all(".")
library(discreteModel)
library(discreteModel)
ptr <- CompartmentSharedPtr()
ptr
my.name <- readline(prompt="Enter name: ")
# convert character into integer
my.age <- as.integer(my.age)
print(paste("Hi,", my.name, "next year you will be", my.age+1, "years old."))
my.name <- readline(prompt="Enter name: ")
my.name <- readline(prompt="Enter name: ")
my.name <- readline(prompt="Enter name: ")
library(discreteModel)
simulation("/home/thinh/Dropbox/oucru/cpp/cpp_training/config/SIR.json", "/home/thinh/Downloads")
library(discreteModel)
