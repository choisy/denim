library(compareDF)
# Read the files
df1 <- read.csv("/home/thinh/Downloads/testData/dolt_example/04_2019.csv")
df2 <- read.csv("/home/thinh/Downloads/testData/dolt_example/04_2019_edited.csv")
# Package compareDF
comparison <- compare_df(df1, df2, "sohoso")
create_output_table(comparison)
distributions <- c(E = weibull(scale = 2, shape = 5),
I = exponential(rate = 1.5))
library(discreteModel)
distributions <- c(E = weibull(scale = 2, shape = 5),
I = exponential(rate = 1.5))
distributions
tidyDistribution <- function(initialValues, distributions) {
distr <- list()
cnInitVal <- names(initialValues)
cnDist <- unique(sapply(names(distributions), function(x) strsplit(x, "\\.")[[1]][[1]]))
for (compName in cnInitVal) {
if (compName %in% cnDist) {
for (i in 1:length(distributions)) {
cName <- unlist(strsplit(names(distributions)[i], "\\."))[1]
pName <- unlist(strsplit(names(distributions)[i], "\\."))[2]
if (cName == compName) {
distr[[compName]][[pName]] <- distributions[[i]]
}
}
} else {
distr[[compName]][["name"]] <- "none"
}
}
return(distr)
}
initialValues <- c(
S = 999,
E = 0,
I = 1,
R = 0
)
distributions <- c(E = weibull(scale = 2, shape = 5),
I = exponential(rate = 1.5))
distributions <- tidyDistribution(initialValues, distribution)
distributions <- tidyDistribution(initialValues, distributions)
distributions
str(distributions)
distributions[1]
distributions[2]
for (param in distributions[2]) {
print(param)
}
for (param in distributions[2]) {
print(names(param))
}
# Key pair is "key": value
newJsonKeyPair <- function(key, value) {
# Check if character is string then automatically add ""
if (is.character(value)) value <- paste0("\"", value, "\"")
js <- paste0("\"", key, "\": ", value)
return(js)
}
for (param in distributions[2]) {
kp <- newJsonKeyPair(names(param), param)
}
for (param in distributions[2]) {
kp <- newJsonKeyPair(names(param), param)
print(kp)
}
# Nested object is "key": { object }
newJsonNestedObject <- function(key, object) {
js <- paste0("\"", key, "\": {", object, "}")
return(js)
}
is.character(distributions[[2]]$name)
for (param in distributions[[2]]) {
kp <- newJsonKeyPair(names(param), param)
cat(kp)
}
distributions[[2]]
for (i in 1:length(distributions[[2]])) {
kp <- newJsonKeyPair(names(param)[i], distributions[[2]][i])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
kp <- newJsonKeyPair(names(distributions[[2]])[i], distributions[[2]][i])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
print(is.character(distributions[[2]][i]))
kp <- newJsonKeyPair(names(distributions[[2]])[i], distributions[[2]][i])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
print(distributions[[2]][i])
kp <- newJsonKeyPair(names(distributions[[2]])[i], distributions[[2]][i])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
print(distributions[[2]][[i]])
kp <- newJsonKeyPair(names(distributions[[2]])[i], distributions[[2]][i])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
print(distributions[[2]][[i]])
kp <- newJsonKeyPair(names(distributions[[2]])[i], distributions[[2]][[i]])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
kp <- newJsonKeyPair(names(distributions[[2]])[i], distributions[[2]][[i]])
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
key <- names(distributions[[2]])[i]
val <- distributions[[2]][[i]]
kp <- newJsonKeyPair(key = key, value = val)
cat(kp)
}
for (i in 1:length(distributions[[2]])) {
key <- names(distributions[[2]])[i]
val <- distributions[[2]][[i]]
kp <- newJsonKeyPair(key = key, value = val)
contents <- c(contents, kp)
}
contents <- c()
for (i in 1:length(distributions[[2]])) {
key <- names(distributions[[2]])[i]
val <- distributions[[2]][[i]]
kp <- newJsonKeyPair(key = key, value = val)
contents <- c(contents, kp)
}
# Json object is { content_1, content_2 }
newJsonObject <- function(...) {
contents <- c(...)
js <- "{\n"
for (content in contents) {
if (content != contents[length(contents)]) {
js <- paste0(js, "  ", content, ",\n")
} else {
js <- paste0(js, "  ", content, "\n")
}
}
js <- paste0(js, "}")
return(js)
}
newJsonObject(contents)
cat(newJsonObject(contents))
distr <- newJsonNestedObject("distribution", obj)
obj <- newJsonObject(contents)
distr <- newJsonNestedObject("distribution", obj)
distr
distr <- newJsonKeyPair("distribution", obj)
distr
# Nested object is "key": { object } with object created by function newJsonObject()
newJsonNestedObject <- function(key, object) {
js <- paste0("\"", key, "\": ", object)
return(js)
}
distr <- newJsonNestedObject("distribution", obj)
cat(ditr)
cat(distr)
#' Distribution object to json
#'
#' Input is a distribution object of a compartment, not the full vector/list
#' of distributions
#' @param distribution a list with elements $name, $rate / $scale / $shape...
#'
#' @return a json object that match format "distribution": {"name": "weibull", "scale": 2, "shape": 5}
#' @export
#'
#' @examples
distributionToJson <- function(distribution) {
contents <- c()
for (i in 1:length(distribution)) {
key <- names(distribution)[i]
val <- distribution[[i]]
kp <- newJsonKeyPair(key = key, value = val)
contents <- c(contents, kp)
}
obj <- newJsonObject(contents)
distr <- newJsonNestedObject("distribution", obj)
return(distr)
}
distributions
for (distribution in distributions) {
d <- distributionToJson(distribution)
cat(d)
}
